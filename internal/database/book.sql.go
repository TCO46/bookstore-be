// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: book.sql

package database

import (
	"context"

	"github.com/google/uuid"
	optional "github.com/moznion/go-optional"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books(title, description, isbn, author)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateBookParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Isbn        string `json:"isbn"`
	Author      string `json:"author"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Description,
		arg.Isbn,
		arg.Author,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT title, description, isbn, author
FROM books
WHERE id = $1
`

type GetBookRow struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Isbn        string `json:"isbn"`
	Author      string `json:"author"`
}

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (GetBookRow, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i GetBookRow
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.Isbn,
		&i.Author,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
SET
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    author = COALESCE($3, author),
    updated_at = now()
WHERE id = $4
`

type UpdateBookParams struct {
	Title       optional.Option[string] `json:"title"`
	Description optional.Option[string] `json:"description"`
	Author      optional.Option[string] `json:"author"`
	ID          uuid.UUID               `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.Exec(ctx, updateBook,
		arg.Title,
		arg.Description,
		arg.Author,
		arg.ID,
	)
	return err
}
