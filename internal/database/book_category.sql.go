// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: book_category.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBookCategory = `-- name: CreateBookCategory :exec
INSERT INTO book_category(book_id, category_id)
VALUES ($1, $2)
`

type CreateBookCategoryParams struct {
	BookID     uuid.UUID `json:"bookId"`
	CategoryID uuid.UUID `json:"categoryId"`
}

func (q *Queries) CreateBookCategory(ctx context.Context, arg CreateBookCategoryParams) error {
	_, err := q.db.Exec(ctx, createBookCategory, arg.BookID, arg.CategoryID)
	return err
}

const getByBook = `-- name: GetByBook :many
SELECT book_id, category_id
FROM book_category
WHERE book_id = $1
`

func (q *Queries) GetByBook(ctx context.Context, bookID uuid.UUID) ([]BookCategory, error) {
	rows, err := q.db.Query(ctx, getByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookCategory
	for rows.Next() {
		var i BookCategory
		if err := rows.Scan(&i.BookID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByCategory = `-- name: GetByCategory :many
SELECT book_id, category_id
FROM book_category
WHERE category_id = $1
`

func (q *Queries) GetByCategory(ctx context.Context, categoryID uuid.UUID) ([]BookCategory, error) {
	rows, err := q.db.Query(ctx, getByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookCategory
	for rows.Next() {
		var i BookCategory
		if err := rows.Scan(&i.BookID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
