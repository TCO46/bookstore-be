// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package database

import (
	"context"

	"github.com/google/uuid"
	optional "github.com/moznion/go-optional"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories(name, description)
VALUES ($1, $2)
RETURNING id
`

type CreateCategoryParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT name, description
FROM categories
WHERE id = $1
`

type GetCategoryRow struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (GetCategoryRow, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i GetCategoryRow
	err := row.Scan(&i.Name, &i.Description)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories
SET
    name = COALESCE($1, name),
    description = COALESCE(slqc.narg('description'), description),
    updated_at = now()
WHERE id = $2
`

type UpdateCategoryParams struct {
	Name optional.Option[string] `json:"name"`
	ID   uuid.UUID               `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.Name, arg.ID)
	return err
}
