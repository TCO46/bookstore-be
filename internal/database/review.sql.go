// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: review.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	optional "github.com/moznion/go-optional"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews(rate, book_id, user_id, content)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateReviewParams struct {
	Rate    int16     `json:"rate"`
	BookID  uuid.UUID `json:"bookId"`
	UserID  uuid.UUID `json:"userId"`
	Content string    `json:"content"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.Rate,
		arg.BookID,
		arg.UserID,
		arg.Content,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1 AND user_id = $2
`

type DeleteReviewParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.Exec(ctx, deleteReview, arg.ID, arg.UserID)
	return err
}

const getReview = `-- name: GetReview :one
SELECT rate, book_id, user_id, content
FROM reviews
WHERE id = $1
`

type GetReviewRow struct {
	Rate    int16     `json:"rate"`
	BookID  uuid.UUID `json:"bookId"`
	UserID  uuid.UUID `json:"userId"`
	Content string    `json:"content"`
}

func (q *Queries) GetReview(ctx context.Context, id uuid.UUID) (GetReviewRow, error) {
	row := q.db.QueryRow(ctx, getReview, id)
	var i GetReviewRow
	err := row.Scan(
		&i.Rate,
		&i.BookID,
		&i.UserID,
		&i.Content,
	)
	return i, err
}

const getReviewByBook = `-- name: GetReviewByBook :many
SELECT rate, book_id, user_id, content
FROM reviews
WHERE book_id = $1
`

type GetReviewByBookRow struct {
	Rate    int16     `json:"rate"`
	BookID  uuid.UUID `json:"bookId"`
	UserID  uuid.UUID `json:"userId"`
	Content string    `json:"content"`
}

func (q *Queries) GetReviewByBook(ctx context.Context, bookID uuid.UUID) ([]GetReviewByBookRow, error) {
	rows, err := q.db.Query(ctx, getReviewByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewByBookRow
	for rows.Next() {
		var i GetReviewByBookRow
		if err := rows.Scan(
			&i.Rate,
			&i.BookID,
			&i.UserID,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :exec
UPDATE reviews
SET
    rate = COALESCE($1, rate),
    content = COALESCE($2, content),
    is_edited = true,
    updated_at = now()
WHERE id = $3
`

type UpdateReviewParams struct {
	Rate    pgtype.Int2             `json:"rate"`
	Content optional.Option[string] `json:"content"`
	ID      uuid.UUID               `json:"id"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) error {
	_, err := q.db.Exec(ctx, updateReview, arg.Rate, arg.Content, arg.ID)
	return err
}
